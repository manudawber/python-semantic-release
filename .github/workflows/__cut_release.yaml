name: Cut release
on:
  workflow_dispatch:
jobs:
  cut-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Validate branch
        if: github.ref != 'refs/heads/main'
        run: echo "This workflow may only be run from branch [main]"; exit 1
      - name: Checkout main
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get latest version
        id: get-latest-version
        run: echo "version=$(git describe --tags --abbrev=0)" >> "$GITHUB_OUTPUT"
      - name: Get next version
        id: get-next-version
        uses: python-semantic-release/python-semantic-release@v8.0.4
        with:
          root_options: -v --noop
          github_token: ${{ secrets.PAT }}
      - name: Validate release
        env:
          OLD_VERSION: ${{ steps.get-latest-version.outputs.version }}
          NEW_VERSION: ${{ steps.get-latest-version.outputs.tag }}
        run: |
          old_version_short="$(cut -d '.' -f 1,2 <<< "$OLD_VERSION")"
          new_version_short="$(cut -d '.' -f 1,2 <<< "$NEW_VERSION")"
          if [[ "$old_version_short" = "$new_version_short" ]]; then
            echo "Anticipated release would bump from [$OLD_VERSION] to [$NEW_VERSION]"
            echo "A release may only be created for a minor or major version increment"
            exit 1
          fi
      - name: Release
        id: release
        uses: python-semantic-release/python-semantic-release@v8.0.4
        with:
          github_token: ${{ secrets.PAT }}
      - name: Create release branch
        id: create-release-branch
        env:
          VERSION: ${{ steps.release.outputs.tag }}
        run: |
          version_short="$(cut -d '.' -f 1,2 <<< "$VERSION")"
          release_branch="release/$version_short"
          git checkout -b "$release_branch"
          git push -u origin HEAD
          echo "release-branch=$release_branch" >> "$GITHUB_OUTPUT"
      - name: Trigger staging deployment
        env:
          GH_TOKEN: ${{ secrets.PAT }}
          RELEASE_BRANCH: ${{ steps.create-release-branch.outputs.release-branch }}
          VERSION: ${{ steps.release.outputs.tag }}
        run: gh workflow run '__deploy_stg.yaml' --ref "$RELEASE_BRANCH" -f version="$VERSION"
